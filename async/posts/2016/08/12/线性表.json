{"tags":[],"categories":[],"url":"/async/posts/2016/08/12/线性表.json","date":1470983930000,"path":{"year":2016,"month":8,"day":12,"name":"线性表"},"title":"","permalink":"http://yoursite.com/2016/08/12/线性表/","content":"<h2 id=\"title-线性表-文章页面上的显示名称，可以任意修改，不会出现在URL中\"><a href=\"#title-线性表-文章页面上的显示名称，可以任意修改，不会出现在URL中\" class=\"headerlink\" title=\"title:线性表 #文章页面上的显示名称，可以任意修改，不会出现在URL中\"></a>title:线性表 #文章页面上的显示名称，可以任意修改，不会出现在URL中</h2><h1 id=\"1、定义\"><a href=\"#1、定义\" class=\"headerlink\" title=\"1、定义\"></a>1、定义</h1><p>线性表是n(n&gt;=0)个具有相同数据类型的元素的有序序列。线性表可逻辑的表示为：<br>$\\ (a_1,a<em>2,…,a</em>{n-1},a_n) $<br>其中，n表示线性表的长度。当n=0是，表示线性表为空表。线性表的具体含义在不同情况下不同，同一线性表中各元素的类型必须相同，通常抽象地记为Elementtype。<br>线性表是一种最常用的数据结构,在java中对应于List集合。</p>\n<h1 id=\"2、线性表常用操作\"><a href=\"#2、线性表常用操作\" class=\"headerlink\" title=\"2、线性表常用操作\"></a>2、线性表常用操作</h1><ol>\n<li>清空线性表</li>\n<li>求线性表长度</li>\n<li>查询指定元素e（不存在返回-1）</li>\n<li>得到线性表第n个元素</li>\n<li>在第i个元素前（后）插入元素e</li>\n<li>删除第i个元素<h1 id=\"3、线性表存储结构\"><a href=\"#3、线性表存储结构\" class=\"headerlink\" title=\"3、线性表存储结构\"></a>3、线性表存储结构</h1><h2 id=\"3-1-数组\"><a href=\"#3-1-数组\" class=\"headerlink\" title=\"3.1 数组\"></a>3.1 数组</h2>使用数组结构存储线性表，在内存单元中使用连续的内存保存线性表，其中size代表线性表的当前长度。如图：<br><img src=\"http://img.blog.csdn.net/20151112115739412\" alt=\"这里写图片描述\"><br>数组型线性表在内存中是连续存储的，所以我们得一次性申请一块连续的空间，这就有可能造成空间的浪费。<h2 id=\"3-2-链表\"><a href=\"#3-2-链表\" class=\"headerlink\" title=\"3.2 链表\"></a>3.2 链表</h2>使用链表存储线性表，不需要申请连续的空间，但是每个元素需要申请额外的空间来保存指向下一个元素的指针。如图：<br><img src=\"http://img.blog.csdn.net/20151112125159043\" alt=\"这里写图片描述\"><br>链表型的线性表不需要提前申请额外的空间只需要在需要的时候动态的申请所需空间即可。<h1 id=\"4、两种特殊的线性表（栈和队列）\"><a href=\"#4、两种特殊的线性表（栈和队列）\" class=\"headerlink\" title=\"4、两种特殊的线性表（栈和队列）\"></a>4、两种特殊的线性表（栈和队列）</h1><h2 id=\"4-1-栈\"><a href=\"#4-1-栈\" class=\"headerlink\" title=\"4.1 栈\"></a>4.1 栈</h2>栈是一种特殊的线性表，这种线性表只能在固定的一端进行插入和删除操作。通常我们将允许进行插入和删除的一端称为栈顶，不可以进行插入和删除的一端称为栈底。向栈顶插入一个元素一般称为入栈操作，从栈顶删除一个元素称为出栈操作。当表中没有元素时，我们将之称为空栈。<h3 id=\"栈的常用操作\"><a href=\"#栈的常用操作\" class=\"headerlink\" title=\"栈的常用操作\"></a>栈的常用操作</h3></li>\n<li>判断栈是否空栈</li>\n<li>向栈顶插入一个元素即入栈操作(push)</li>\n<li>从栈顶取一个元素即出栈操作(pop)</li>\n<li>读栈顶元素(peek)<h2 id=\"4-2-队列\"><a href=\"#4-2-队列\" class=\"headerlink\" title=\"4.2 队列\"></a>4.2 队列</h2>队列也是一种特殊的线性表，不同的是在这种线性表中，删除运算限定在表的一端进行，而插入操作限定在标的另外一端进行。我们将允许插入操作的一端称为队尾，允许删除操作的一端称为队首。向队尾插入元素称为入队，从队首删除元素称为出对。<h3 id=\"队列的常用操作\"><a href=\"#队列的常用操作\" class=\"headerlink\" title=\"队列的常用操作\"></a>队列的常用操作</h3></li>\n<li>判断队列是否空</li>\n<li>向队尾插入一个元素即入队操作</li>\n<li>从队首删除一个元素即出对操作</li>\n<li>读队首元素(peek)<h1 id=\"5、数组和链表存储结构的比较\"><a href=\"#5、数组和链表存储结构的比较\" class=\"headerlink\" title=\"5、数组和链表存储结构的比较\"></a>5、数组和链表存储结构的比较</h1>这里使用一个表格来列举数组型线性表和链表型线性表的主要区别。<br><img src=\"http://img.blog.csdn.net/20151112133327402\" alt=\"这里写图片描述\"></li>\n</ol>\n"}